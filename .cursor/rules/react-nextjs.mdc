# React & Next.js Standards

## Component Guidelines

- Use functional components with hooks
- Prefer server components by default, use client components only when needed
- Use server actions for data mutations
- Implement proper error boundaries
- Use Next.js App Router patterns

## File Structure

```
/app
  /api          # API routes
  /components   # Reusable UI components
  /lib          # Utilities and configurations
  /types        # TypeScript type definitions
  /hooks        # Custom React hooks
  /styles       # Global styles
```

## Component Patterns

```typescript
// Server Component (default)
export default async function DonorList() {
  const donors = await fetchDonors();
  return <div>{/* JSX */}</div>;
}

// Client Component (when needed)
("use client");
export default function InteractiveForm() {
  const [state, setState] = useState();
  return <form>{/* JSX */}</form>;
}
```

## State Management

- Use SWR for data fetching and caching
- Use tRPC for end-to-end type safety
- Prefer server state over client state when possible
- Use React Query patterns for optimistic updates
  description:
  globs:
  alwaysApply: false

---
