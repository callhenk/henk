# API Standards

## Route Structure

- RESTful API routes in `/app/api/`
- Use proper HTTP status codes
- Implement proper error handling and validation
- Use Supabase JWT for authentication
- Rate limiting for external API calls

## Error Handling

```typescript
// Proper error handling in API routes
export async function POST(request: Request) {
  try {
    const body = await request.json();

    // Validate input
    if (!body.required_field) {
      return Response.json(
        { error: "Missing required field" },
        { status: 400 }
      );
    }

    // Implementation
    const result = await processData(body);

    return Response.json({ success: true, data: result });
  } catch (error) {
    console.error("API Error:", error);
    return Response.json({ error: "Internal server error" }, { status: 500 });
  }
}
```

## Authentication

- Use Supabase JWT tokens for authentication
- Implement proper session management
- Validate user permissions for each endpoint
- Use RLS policies for data access control

## Validation

- Use zod for request validation
- Define proper TypeScript types for all endpoints
- Validate all user inputs
- Sanitize data before database operations

## Performance

- Implement proper caching strategies
- Use database indexes for queries
- Monitor API response times
- Implement rate limiting where appropriate
  description:
  globs:
  alwaysApply: false

---
