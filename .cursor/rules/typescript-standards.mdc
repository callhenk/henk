# TypeScript Standards

## General Guidelines

- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Use proper type annotations for all function parameters and return types
- Leverage Supabase generated types from `supabase-js`

## Type Definitions

```typescript
// Use interfaces for object shapes
interface Donor {
  id: string;
  name: string;
  phone: string;
  consent_given: boolean;
  created_at: string;
}

// Use proper typing for async functions
async function fetchDonor(id: string): Promise<Donor | null> {
  // Implementation
}
```

## Database Types

- Use Supabase generated types for database operations
- Always type the return values from Supabase queries
- Handle error types properly in try-catch blocks

## API Types

- Define request/response types for all API routes
- Use zod for runtime validation when needed
- Export types from API route files for reuse
  description:
  globs:
  alwaysApply: false

---
